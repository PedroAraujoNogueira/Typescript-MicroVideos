1. Digite na pasta raiz do seu terminal: 
docker-compose up --build 

2. Abra outra janela do terminal e digite docker-compose exec app bash
OU
docker exec -it micro-videos-typescript-app bash

3. Dentro do bash do app digite: npm init -y

4. Dentro do bash do app digite: npm install typescript ts-node @types/node --save-dev

5. Trocar a versão do @types/node dentro do package.json para a versão mais próxima
do node que instalamos no nosso dockerfile, no nosso caso a versão mais próxima era 
a ^14.14.31. Para sabermos as versões do @types/node podemos usar o comando 
"npm view @types/node".
5.1. Remover o arquivo package-lock.json e a pasta node_modules.
5.2. npm i

6. Em scripts no package.json adicionar o "ts-node": "ts-node".

7. npx tsc --init -> Esse comando vai gerar o arquivo que contém as configurações do 
typescript(tsconfig.json).

8. No arquivo tsconfig.json trocar os seguintes valores:
- De "target": "es2016" para "target": "es2017"
- Descomentar o "incremental": true -> é uma compilação incremental que permite que o 
typescript rode mais rápido.
- Descomentar o "baseUrl": "./" e trocar para "baseUrl": "./src".
- Acrescentar "include": ["src/"] após o objeto compilerOptions.
- Descomentar o "strictNullChecks": true e trocar para "strictNullChecks": false 

9. Em scripts no package.json adicionar o "tsc": "tsc".

10. npm install jest @types/jest --save-dev

11. npx jest --init
11.1. Would you like to use Jest when running "test" script in "package.json"? … yes
11.2. Would you like to use Typescript for the configuration file? … yes
11.3. Choose the test environment that will be used for testing › node
11.4. Do you want Jest to add coverage reports? … no
11.5. Which provider should be used to instrument code for coverage? › v8
11.6. Automatically clear mock calls, instances and results before every test? … yes

12. No arquivo jest.config.ts:
12.1. Descomente o rootDir: undefined e mude para rootDir: "src"
12.2. Descomente o testRegex: [] e mude para testRegex: ".*\\..*spec\\.ts$"
Nesse atributo definimos como o jest vai encontrar os arquivos de teste. 
Toda vez que formos criar um arquivo de teste vamos usar o padrão: nomedoarquivo.spec.ts
12.3. Descomente o transform: undefined e mude para transform: {"^.+\\.ts?$": ["@swc/jest"] }
Nesse atributo estamos dizendo para fazer a compilação de qualquer arquivo 
Typescript usando o swc. 

13. Vamos adicionar um compilador para Javascript chamado swc.
npm i @swc/core @swc/jest --save-dev

14. Em scripts no package.json adicionar o "test": "jest".

15. O Lodash é uma biblioteca para manipulação de arrays, strings, objetos, números e etc,
com vários métodos úteis. Como ele já vem instalado com outras bibliotecas que já 
instalamos, então só precisamos instalar a tipagem dele:
-> npm i --save-dev @types/lodash

16. npm install uuid

17. npm install @types/uuid --save-dev